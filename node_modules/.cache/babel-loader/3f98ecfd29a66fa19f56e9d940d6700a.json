{"ast":null,"code":"var _jsxFileName = \"D:\\\\test_react_app\\\\untitled\\\\src\\\\components\\\\Toe.tsx\";\nimport React from 'react';\nimport x_img from '../res/x.png';\nimport round_img from '../res/round.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let Type;\n\n(function (Type) {\n  Type[\"type_x\"] = \"type_x\";\n  Type[\"type_o\"] = \"type_o\";\n  Type[\"none\"] = \"none\";\n})(Type || (Type = {}));\n\nconst ConvertType = value => {\n  if (value == Type.type_x) return x_img;else if (value == Type.type_o) return round_img;else if (value == undefined) return null;else return null;\n};\n\n_c = ConvertType;\n\nconst Toe = _ref => {\n  let {\n    type\n  } = _ref;\n  // @ts-ignore\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: '1px solid black',\n      display: 'flex',\n      backgroundColor: 'lightgray',\n      width: '90px',\n      height: '90px',\n      alignSelf: 'center',\n      verticalAlign: 'baseline',\n      flexFlow: 'row wrap',\n      flexWrap: 'wrap'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      style: {\n        width: '90px',\n        height: '90px'\n      },\n      src: ConvertType(type),\n      alt: type === null || type === void 0 ? void 0 : type.toString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = Toe;\nexport default Toe;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ConvertType\");\n$RefreshReg$(_c2, \"Toe\");","map":{"version":3,"sources":["D:/test_react_app/untitled/src/components/Toe.tsx"],"names":["React","x_img","round_img","Type","ConvertType","value","type_x","type_o","undefined","Toe","type","border","display","backgroundColor","width","height","alignSelf","verticalAlign","flexFlow","flexWrap","toString"],"mappings":";AAAA,OAAOA,KAAP,MAAwB,OAAxB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;AAEA,WAAYC,IAAZ;;WAAYA,I;AAAAA,EAAAA,I;AAAAA,EAAAA,I;AAAAA,EAAAA,I;GAAAA,I,KAAAA,I;;AAUZ,MAAMC,WAAW,GAAIC,KAAD,IAAiB;AACjC,MAAIA,KAAK,IAAIF,IAAI,CAACG,MAAlB,EAA0B,OAAOL,KAAP,CAA1B,KACK,IAAII,KAAK,IAAIF,IAAI,CAACI,MAAlB,EAA0B,OAAOL,SAAP,CAA1B,KACA,IAAIG,KAAK,IAAIG,SAAb,EAAwB,OAAO,IAAP,CAAxB,KACA,OAAO,IAAP;AACR,CALD;;KAAMJ,W;;AAMN,MAAMK,GAAiB,GAAG,QAAY;AAAA,MAAX;AAACC,IAAAA;AAAD,GAAW;AAClC;AACA,sBACI;AAAK,IAAA,KAAK,EAAE;AACRC,MAAAA,MAAM,EAAE,iBADA;AAERC,MAAAA,OAAO,EAAE,MAFD;AAGRC,MAAAA,eAAe,EAAE,WAHT;AAIRC,MAAAA,KAAK,EAAE,MAJC;AAKRC,MAAAA,MAAM,EAAE,MALA;AAMRC,MAAAA,SAAS,EAAE,QANH;AAORC,MAAAA,aAAa,EAAE,UAPP;AAQRC,MAAAA,QAAQ,EAAE,UARF;AASRC,MAAAA,QAAQ,EAAE;AATF,KAAZ;AAAA,2BAYI;AACI,MAAA,KAAK,EAAE;AAACL,QAAAA,KAAK,EAAE,MAAR;AAAgBC,QAAAA,MAAM,EAAE;AAAxB,OADX;AAEI,MAAA,GAAG,EAAEX,WAAW,CAACM,IAAD,CAFpB;AAGI,MAAA,GAAG,EAAEA,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEU,QAAN;AAHT;AAAA;AAAA;AAAA;AAAA;AAZJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CAvBD;;MAAMX,G;AAyBN,eAAeA,GAAf","sourcesContent":["import React, {FC} from 'react';\r\nimport x_img from '../res/x.png';\r\nimport round_img from '../res/round.png';\r\n\r\nexport enum Type {\r\n    type_x = 'type_x',\r\n    type_o = 'type_o',\r\n    none = 'none'\r\n}\r\n\r\nexport interface ToeProps {\r\n    type?: Type | undefined\r\n}\r\n\r\nconst ConvertType = (value: Type) => {\r\n    if (value == Type.type_x) return x_img;\r\n    else if (value == Type.type_o) return round_img;\r\n    else if (value == undefined) return null;\r\n    else return null\r\n}\r\nconst Toe: FC<ToeProps> = ({type}) => {\r\n    // @ts-ignore\r\n    return (\r\n        <div style={{\r\n            border: '1px solid black',\r\n            display: 'flex',\r\n            backgroundColor: 'lightgray',\r\n            width: '90px',\r\n            height: '90px',\r\n            alignSelf: 'center',\r\n            verticalAlign: 'baseline',\r\n            flexFlow: 'row wrap',\r\n            flexWrap: 'wrap'\r\n        }}\r\n        >\r\n            <img\r\n                style={{width: '90px', height: '90px'}}\r\n                src={ConvertType(type)}\r\n                alt={type?.toString()}\r\n            />\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Toe;"]},"metadata":{},"sourceType":"module"}