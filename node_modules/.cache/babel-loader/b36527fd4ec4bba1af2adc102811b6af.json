{"ast":null,"code":"var _jsxFileName = \"D:\\\\test_react_app\\\\untitled\\\\src\\\\components\\\\Toe.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport x_img from '../res/x.png';\nimport round_img from '../res/round.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let Type;\n\n(function (Type) {\n  Type[\"type_x\"] = \"type_x\";\n  Type[\"type_o\"] = \"type_o\";\n  Type[\"none\"] = \"none\";\n})(Type || (Type = {}));\n\n//func\nconst ConvertType = value => {\n  if (value == Type.type_x) return x_img;else if (value == Type.type_o) return round_img;else if (value == undefined) return null;else return null;\n}; //component\n\n\n_c = ConvertType;\n\nconst Toe = _ref => {\n  _s();\n\n  var _ref2;\n\n  let {\n    type,\n    onClick\n  } = _ref;\n  const [state, setState] = useState(undefined);\n  if (type == Type.none) return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: '2px solid black',\n      borderRadius: '10px',\n      display: 'flex',\n      width: '90px',\n      height: '90px',\n      alignSelf: 'center',\n      verticalAlign: 'baseline',\n      flexFlow: 'row wrap',\n      flexWrap: 'wrap'\n    },\n    onClick: () => onClick(state)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);else return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: '2px solid black',\n      borderRadius: '10px',\n      display: 'flex',\n      width: '90px',\n      height: '90px',\n      alignSelf: 'center',\n      verticalAlign: 'baseline',\n      flexFlow: 'row wrap',\n      flexWrap: 'wrap'\n    },\n    onClick: () => onClick(state),\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      style: {\n        width: '90px',\n        height: '90px'\n      },\n      src: (_ref2 = type == null ? ' ' : ConvertType(type)) === null || _ref2 === void 0 ? void 0 : _ref2.toString(),\n      alt: type === null || type === void 0 ? void 0 : type.toString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Toe, \"UmDR47zauHFhdnvehKXd0aBHZXw=\");\n\n_c2 = Toe;\nexport default Toe;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ConvertType\");\n$RefreshReg$(_c2, \"Toe\");","map":{"version":3,"sources":["D:/test_react_app/untitled/src/components/Toe.tsx"],"names":["React","useState","x_img","round_img","Type","ConvertType","value","type_x","type_o","undefined","Toe","type","onClick","state","setState","none","border","borderRadius","display","width","height","alignSelf","verticalAlign","flexFlow","flexWrap","toString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;AAEA,WAAYC,IAAZ;;WAAYA,I;AAAAA,EAAAA,I;AAAAA,EAAAA,I;AAAAA,EAAAA,I;GAAAA,I,KAAAA,I;;AAWZ;AACA,MAAMC,WAAW,GAAIC,KAAD,IAAiB;AACjC,MAAIA,KAAK,IAAIF,IAAI,CAACG,MAAlB,EAA0B,OAAOL,KAAP,CAA1B,KACK,IAAII,KAAK,IAAIF,IAAI,CAACI,MAAlB,EAA0B,OAAOL,SAAP,CAA1B,KACA,IAAIG,KAAK,IAAIG,SAAb,EAAwB,OAAO,IAAP,CAAxB,KACA,OAAO,IAAP;AACR,CALD,C,CAMA;;;KANMJ,W;;AAON,MAAMK,GAAiB,GAAG,QAAqB;AAAA;;AAAA;;AAAA,MAApB;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,GAAoB;AAC3C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAACQ,SAAD,CAAlC;AACA,MAAIE,IAAI,IAAIP,IAAI,CAACW,IAAjB,EAAuB,oBACnB;AAAK,IAAA,KAAK,EAAE;AACRC,MAAAA,MAAM,EAAE,iBADA;AAERC,MAAAA,YAAY,EAAE,MAFN;AAGRC,MAAAA,OAAO,EAAE,MAHD;AAIRC,MAAAA,KAAK,EAAE,MAJC;AAKRC,MAAAA,MAAM,EAAE,MALA;AAMRC,MAAAA,SAAS,EAAE,QANH;AAORC,MAAAA,aAAa,EAAE,UAPP;AAQRC,MAAAA,QAAQ,EAAE,UARF;AASRC,MAAAA,QAAQ,EAAE;AATF,KAAZ;AAWK,IAAA,OAAO,EAAE,MAAIZ,OAAO,CAACC,KAAD;AAXzB;AAAA;AAAA;AAAA;AAAA,UADmB,CAAvB,KAeK,oBACD;AAAK,IAAA,KAAK,EAAE;AACRG,MAAAA,MAAM,EAAE,iBADA;AAERC,MAAAA,YAAY,EAAE,MAFN;AAGRC,MAAAA,OAAO,EAAE,MAHD;AAIRC,MAAAA,KAAK,EAAE,MAJC;AAKRC,MAAAA,MAAM,EAAE,MALA;AAMRC,MAAAA,SAAS,EAAE,QANH;AAORC,MAAAA,aAAa,EAAE,UAPP;AAQRC,MAAAA,QAAQ,EAAE,UARF;AASRC,MAAAA,QAAQ,EAAE;AATF,KAAZ;AAWK,IAAA,OAAO,EAAE,MAAIZ,OAAO,CAACC,KAAD,CAXzB;AAAA,2BAaI;AAEI,MAAA,KAAK,EAAE;AAACM,QAAAA,KAAK,EAAE,MAAR;AAAgBC,QAAAA,MAAM,EAAE;AAAxB,OAFX;AAGI,MAAA,GAAG,WAAGT,IAAI,IAAI,IAAR,GAAe,GAAf,GAAqBN,WAAW,CAACM,IAAD,CAAnC,0CAAE,MAA0Cc,QAA1C,EAHT;AAII,MAAA,GAAG,EAAEd,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEc,QAAN;AAJT;AAAA;AAAA;AAAA;AAAA;AAbJ;AAAA;AAAA;AAAA;AAAA,UADC;AAuBR,CAxCD;;GAAMf,G;;MAAAA,G;AA0CN,eAAeA,GAAf","sourcesContent":["import React, {FC, useState} from 'react';\r\nimport x_img from '../res/x.png';\r\nimport round_img from '../res/round.png';\r\n\r\nexport enum Type {\r\n    type_x = 'type_x',\r\n    type_o = 'type_o',\r\n    none = 'none'\r\n}\r\n\r\nexport interface ToeProps {\r\n    type?: Type | undefined,\r\n    onClick: (e:any) => void\r\n}\r\n\r\n//func\r\nconst ConvertType = (value: Type) => {\r\n    if (value == Type.type_x) return x_img;\r\n    else if (value == Type.type_o) return round_img;\r\n    else if (value == undefined) return null;\r\n    else return null;\r\n}\r\n//component\r\nconst Toe: FC<ToeProps> = ({type, onClick}) => {\r\n    const [state, setState] = useState(undefined);\r\n    if (type == Type.none) return (\r\n        <div style={{\r\n            border: '2px solid black',\r\n            borderRadius: '10px',\r\n            display: 'flex',\r\n            width: '90px',\r\n            height: '90px',\r\n            alignSelf: 'center',\r\n            verticalAlign: 'baseline',\r\n            flexFlow: 'row wrap',\r\n            flexWrap: 'wrap'\r\n        }}\r\n             onClick={()=>onClick(state)}\r\n        />\r\n    )\r\n    else return (\r\n        <div style={{\r\n            border: '2px solid black',\r\n            borderRadius: '10px',\r\n            display: 'flex',\r\n            width: '90px',\r\n            height: '90px',\r\n            alignSelf: 'center',\r\n            verticalAlign: 'baseline',\r\n            flexFlow: 'row wrap',\r\n            flexWrap: 'wrap'\r\n        }}\r\n             onClick={()=>onClick(state)}\r\n        >\r\n            <img\r\n\r\n                style={{width: '90px', height: '90px'}}\r\n                src={(type == null ? ' ' : ConvertType(type))?.toString()}\r\n                alt={type?.toString()}\r\n            />\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Toe;"]},"metadata":{},"sourceType":"module"}